{"ast":null,"code":"import axios from \"axios\";\nimport swal from \"sweetalert2\";\nimport store from \"../vuex/store\";\nexport default {\n  data() {\n    return {\n      page: 1,\n      orders: [],\n      originalOrders: [],\n      search: \"\"\n    };\n  },\n  methods: {\n    markAsCompleted: function () {\n      const form = event.target;\n      const self = this;\n      swal.fire({\n        title: 'Are you sure ?',\n        text: \"Do you want to mark this order as completed ?\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes'\n      }).then(async function (result) {\n        if (result.isConfirmed) {\n          form.submit.setAttribute(\"disabled\", \"disabled\");\n          const formData = new FormData(form);\n          const response = await axios.post(self.$apiURL + \"/admin/orders/markAsCompleted\", formData, {\n            headers: self.$headers\n          });\n          if (response.data.status == \"success\") {\n            for (let a = 0; a < self.orders.length; a++) {\n              if (self.orders[a]._id == form._id.value) {\n                self.orders[a].status = \"Completed\";\n                break;\n              }\n            }\n            form.submit.removeAttribute(\"disabled\");\n            self.originalOrders = self.orders;\n          } else {\n            swal.fire(\"Error\", response.data.message, \"error\");\n          }\n        }\n      });\n    },\n    getTotal: function (items, shippingCharges) {\n      let total = 0;\n      for (let a = 0; a < items.length; a++) {\n        total += parseInt(items[a].price) * items[a].units;\n      }\n      total += shippingCharges;\n      return total;\n    },\n    loadMore: async function () {\n      this.$refs.btnLoadMore.setAttribute(\"disabled\", \"disabled\");\n      this.page++;\n      this.getOrders();\n    },\n    getOrders: async function () {\n      const formData = new FormData();\n      formData.append(\"page\", this.page);\n      const response = await axios.post(this.$apiURL + \"/admin/orders/fetch\", formData, {\n        headers: this.$headers\n      });\n      this.$refs.btnLoadMore.removeAttribute(\"disabled\");\n      if (response.data.status == \"success\") {\n        if (response.data.orders.length > 0) {\n          this.orders = response.data.orders;\n          this.originalOrders = this.orders;\n        }\n        store.commit(\"setUnReadOrderNotifications\", 0);\n      } else {\n        swal.fire(\"Error\", response.data.message, \"error\");\n      }\n    }\n  },\n  mounted: function () {\n    this.getOrders();\n  },\n  watch: {\n    search: async function (to, from) {\n      if (this.search.length < 2) {\n        this.orders = this.originalOrders;\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"search\", this.search);\n      const response = await axios.post(this.$apiURL + \"/admin/orders/search\", formData, {\n        headers: this.$headers\n      });\n      if (response.data.status == \"success\") {\n        this.orders = response.data.orders;\n      } else {\n        swal.fire(\"Error\", response.data.message, \"error\");\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","swal","store","data","page","orders","originalOrders","search","methods","markAsCompleted","form","event","target","self","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","submit","setAttribute","formData","FormData","response","post","$apiURL","headers","$headers","status","a","length","_id","value","removeAttribute","message","getTotal","items","shippingCharges","total","parseInt","price","units","loadMore","$refs","btnLoadMore","getOrders","append","commit","mounted","watch","to","from"],"sourceRoot":"","sources":["/home/aka/Documents/react-nativ/ecommerce-mevn-stack/admin/src/components/AllOrders.vue"],"sourcesContent":["<template>\n    <!-- End Navbar -->\n    <div class=\"container-fluid py-4\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h4 class=\"font-weight-bolder\">All orders</h4>\n                    </div>\n\n                    <div class=\"card-body\">\n\n                        <div class=\"input-group input-group-outline mb-3\">\n                            <label class=\"form-label no-left-margin\">Search</label>\n                            <input type=\"text\" v-model=\"search\" autocomplete=\"off\" class=\"form-control\" required />\n                        </div>\n\n                        <div class=\"table-responsive p-0\">\n                            <table class=\"table align-items-center justify-content-center mb-0\" id=\"table\">\n                                <thead>\n                                    <tr>\n                                        <th class=\"text-uppercase text-secondary opacity-7\">User</th>\n                                        <th class=\"text-uppercase text-secondary opacity-7\">Address</th>\n                                        <th class=\"text-uppercase text-secondary opacity-7\">Total</th>\n                                        <th class=\"text-uppercase text-secondary opacity-7\">Order</th>\n                                        <th class=\"text-uppercase text-secondary opacity-7\">Status</th>\n                                        <th class=\"text-uppercase text-secondary opacity-7\">Actions</th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    <tr v-for=\"(order) in orders\" v-bind:key=\"order._id.toString()\">\n                                        <td>\n                                            <template v-if=\"order.paidVia == 'COD'\">\n                                                <span v-text=\"order.name\"></span> <br />\n                                                <span v-text=\"order.email\"></span> <br />\n                                                <span v-text=\"order.mobile\"></span> <br />\n                                                <span v-text=\"order.country\"></span>\n                                            </template>\n                                        </td>\n\n                                        <td>\n                                            <span v-if=\"order.paidVia == 'COD'\" v-text=\"order.address\"></span>\n                                        </td>\n\n                                        <td>\n                                            $<span v-text=\"getTotal(order.cart, order.shippingCharges || 0)\"></span>\n                                        </td>\n\n                                        <td>\n                                            <span v-if=\"order.paidVia == 'COD'\" style=\"color: black;\">Cash on delivery</span>\n                                        </td>\n\n                                        <td>\n                                            <span v-text=\"order.status\"></span>\n                                        </td>\n\n                                        <td>\n                                            <router-link v-bind:to=\"'/orderDetail/' + order._id\" class=\"text-secondary\">\n                                                Detail\n                                            </router-link>\n\n                                            <form v-if=\"typeof order.status == 'undefined' || order.status == 'Processing'\" v-on:submit.prevent=\"markAsCompleted\">\n                                                <input type=\"hidden\" name=\"_id\" v-bind:value=\"order._id\" required />\n\n                                                <input type=\"submit\" name=\"submit\" value=\"Mark as complete\" class=\"btn bg-gradient-primary\" />\n                                            </form>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n\n                    <div class=\"card-footer\">\n                        <button type=\"button\" v-on:click=\"loadMore\" class=\"btn btn-lg bg-gradient-primary btn-lg w-100 mt-4 mb-0\" ref=\"btnLoadMore\">Load more</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n\n    import axios from \"axios\"\n    import swal from \"sweetalert2\"\n    import store from \"../vuex/store\"\n\n    export default {\n        data() {\n            return {\n                page: 1,\n                orders: [],\n                originalOrders: [],\n                search: \"\"\n            }\n        },\n\n        methods: {\n\n            markAsCompleted: function () {\n                const form = event.target\n                const self = this\n\n                swal.fire({\n                    title: 'Are you sure ?',\n                    text: \"Do you want to mark this order as completed ?\",\n                    icon: 'warning',\n                    showCancelButton: true,\n                    confirmButtonColor: '#3085d6',\n                    cancelButtonColor: '#d33',\n                    confirmButtonText: 'Yes'\n                }).then(async function (result) {\n                    if (result.isConfirmed) {\n                        form.submit.setAttribute(\"disabled\", \"disabled\")\n\n                        const formData = new FormData(form)\n                        const response = await axios.post(\n                            self.$apiURL + \"/admin/orders/markAsCompleted\",\n                            formData,\n                            {\n                                headers: self.$headers\n                            }\n                        )\n\n                        if (response.data.status == \"success\") {\n                            for (let a = 0; a < self.orders.length; a++) {\n                                if (self.orders[a]._id == form._id.value) {\n                                    self.orders[a].status = \"Completed\"\n                                    break\n                                }\n                            }\n\n                            form.submit.removeAttribute(\"disabled\")\n                            self.originalOrders = self.orders\n                        } else {\n                            swal.fire(\"Error\", response.data.message, \"error\")\n                        }\n                    }\n                })\n            },\n\n            getTotal: function (items, shippingCharges) {\n                let total = 0\n                for (let a = 0; a < items.length; a++) {\n                    total += (parseInt(items[a].price) * items[a].units)\n                }\n                total += shippingCharges\n                return total\n            },\n\n            loadMore: async function () {\n                this.$refs.btnLoadMore.setAttribute(\"disabled\", \"disabled\")\n\n                this.page++\n                this.getOrders()\n            },\n\n            getOrders: async function () {\n                const formData = new FormData()\n                formData.append(\"page\", this.page)\n\n                const response = await axios.post(\n                    this.$apiURL + \"/admin/orders/fetch\",\n                    formData,\n                    {\n                        headers: this.$headers\n                    }\n                )\n\n                this.$refs.btnLoadMore.removeAttribute(\"disabled\")\n\n                if (response.data.status == \"success\") {\n                    if (response.data.orders.length > 0) {\n                        this.orders = response.data.orders\n                        this.originalOrders = this.orders\n                    }\n                    store.commit(\"setUnReadOrderNotifications\", 0)\n                } else {\n                    swal.fire(\"Error\", response.data.message, \"error\")\n                }\n            }\n        },\n\n        mounted: function () {\n            this.getOrders()\n        },\n\n        watch: {\n            search: async function (to, from) {\n                if (this.search.length < 2) {\n                    this.orders = this.originalOrders\n                    return\n                }\n\n                const formData = new FormData()\n                formData.append(\"search\", this.search)\n\n                const response = await axios.post(\n                    this.$apiURL + \"/admin/orders/search\",\n                    formData,\n                    {\n                        headers: this.$headers\n                    }\n                )\n\n                if (response.data.status == \"success\") {\n                    this.orders = response.data.orders\n                } else {\n                    swal.fire(\"Error\", response.data.message, \"error\")\n                }\n            }\n        }\n    }\n</script>\n\n<style>\n    #table th,\n    #table td {\n        padding-left: 0px !important;\n    }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}